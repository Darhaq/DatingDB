@page "/persons/create"
@inject DatingDB.Data.DatingDBContext DB
@using DatingDB.Models
@using DatingDB.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject UserService UserService

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Person" OnValidSubmit="AddPerson" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="firstname" class="form-label">FirstName:</label> 
                <InputText id="firstname" @bind-Value="Person.FirstName" class="form-control" /> 
                <ValidationMessage For="() => Person.FirstName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastname" class="form-label">LastName:</label> 
                <InputText id="lastname" @bind-Value="Person.LastName" class="form-control" /> 
                <ValidationMessage For="() => Person.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="Person.Email" class="form-control" /> 
                <ValidationMessage For="() => Person.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="login" class="form-label">Login:</label> 
                <InputText id="login" @bind-Value="Person.Login" class="form-control" /> 
                <ValidationMessage For="() => Person.Login" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="Person.Password" class="form-control" /> 
                <ValidationMessage For="() => Person.Password" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password2" class="form-label">Password2:</label> 
                <InputText id="password2" @bind-Value="Person.Password2" class="form-control" /> 
                <ValidationMessage For="() => Person.Password2" class="text-danger" /> 
            </div>        
            @* <div class="mb-3">
                <label for="createdate" class="form-label">CreateDate:</label> 
                <InputDate id="createdate" @bind-Value="User.CreateDate" class="form-control" /> 
                <ValidationMessage For="() => User.CreateDate" class="text-danger" /> 
            </div>   *@      
            @* <div class="mb-3">
                <label for="deletedate" class="form-label">DeleteDate:</label> 
                <InputDate id="deletedate" @bind-Value="User.DeleteDate" class="form-control" /> 
                <ValidationMessage For="() => User.DeleteDate" class="text-danger" /> 
            </div>   *@      
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/persons">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Person Person { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddPerson()
    {
        DB.Persons.Add(Person);
        await DB.SaveChangesAsync();
        UserService.IsLoggedIn = true;

        NavigationManager.NavigateTo("/persons");
    }
}
